---
title: DT & RF
date: 2025-03-04 05:11:00 +09:00
categories: [Python]
tags: [Python, DT, RF]
---

---

# 트리 분석: 기초부터 심화까지 총정리

트리 분석은 데이터 분석과 머신러닝에서 매우 강력한 기법으로, 데이터를 시각적으로 분할하고 예측하는 데 유용하게 사용됩니다. 이 글에서는 트리 모델의 기본 원리, 주요 알고리즘, 특징과 한계, 그리고 이를 최적화하기 위한 하이퍼파라미터 설정까지 폭넓게 다뤄보겠습니다.

---

## 트리 분석의 기초 개념

트리 분석은 **결정 트리(Decision Tree)**를 기반으로 데이터 분류(Classification)와 회귀(Regression)에 활용됩니다. 트리 모델의 대표적인 종류와 특징은 다음과 같습니다:

### 1. 주요 트리 알고리즘
- **결정 트리 (Decision Tree, DT):** 단일 트리를 기반으로 간단하게 의사 결정을 수행하는 기법.
- **랜덤 포레스트 (Random Forest, RF):** 여러 개의 결정 트리를 조합하여 평균값(연속형 변수) 또는 다수결 투표(범주형 변수)를 통해 결과를 도출. 분산을 줄임으로써 과적합(Overfitting)을 방지.
- **Adaboost:** 잘못된 예측 샘플에 더 높은 가중치를 부여하여 모델 성능을 개선.
- **Gradient Boost:** 경사하강법(Gradient Descent)을 사용하여 예측 잔차(Residual)를 줄이고 모델의 Bias를 개선.
- **XGBoost, LightGBM, CatBoost:** 고성능 부스팅 기법으로, 이산형 및 연속형 데이터 모두 효과적으로 처리 가능.

---

## 트리 모델의 특징

트리 분석은 다음과 같은 장점으로 잘 알려져 있습니다:

### 1. **투명성 (Whitebox)**
모델이 의사 결정을 어떻게 내리는지 명확히 설명할 수 있어, 결과 해석이 쉽습니다.

### 2. **일반화 능력**
복잡한 데이터 패턴을 학습하며, 학습 데이터와 새로운 데이터 모두에 대해 높은 예측 성능을 제공합니다.

### 3. **데이터 정규화 불필요**
데이터의 스케일 조정이나 분포 가정이 필요 없으므로 전처리 과정을 단순화합니다.

### 4. **범용성**
범주형 데이터 분류(Classification)와 연속형 데이터 예측(Regression)에 모두 활용될 수 있습니다.

### 5. **낮은 계산 비용**
단일 결정 트리의 경우 빠른 계산 속도를 자랑하며, 대규모 데이터에서도 효율적입니다.

---

## 트리 모델의 단점

트리 분석은 강력하지만 몇 가지 단점이 있습니다:

1. **과적합(Overfitting):** 학습 데이터에 지나치게 특화되어 새로운 데이터에 대한 예측 성능이 저하될 수 있습니다.
2. **특징 선택의 어려움:** 중요한 특징을 선택하지 못하면 모델 성능이 크게 저하될 수 있습니다.
3. **노이즈 민감도:** 데이터에 포함된 노이즈로 인해 모델이 불안정해질 수 있습니다.
4. **유의 수준 판단 부족:** 통계적인 유의성을 평가하는 명확한 기준이 부족할 수 있습니다.

---

## 트리 분석에서 사용하는 척도 (Criterion)

트리를 분할하는 기준을 결정하는 주요 척도는 다음과 같습니다:

### 1. **지니 불순도 (Gini Impurity)**
- 특정 클래스로 데이터를 분류할 확률을 기반으로 불순도를 계산.
- 계산이 간단하며, 자주 사용됨.

### 2. **엔트로피 (Entropy)**
- 데이터의 무질서도 또는 불확실성을 측정하며, 정보 이득(Information Gain)을 계산할 때 사용.
- 데이터가 균등하게 분포될수록 엔트로피 값이 높아집니다.

---

## 결정 트리 구조와 구성 요소

### 1. **루트 노드 (Root Node)**
트리의 시작점으로, 데이터를 처음으로 분할합니다.

### 2. **내부 노드 (Internal Node)**
데이터를 조건에 따라 분기하며, 분할 규칙이 포함됩니다.

### 3. **리프 노드 (Leaf Node)**
더 이상 분할되지 않는 최종 노드로, 예측값 또는 클래스 레이블을 나타냅니다.

---

## 트리 모델의 하이퍼파라미터 최적화

트리 모델의 성능은 하이퍼파라미터 설정에 의해 결정됩니다:

- **`max_depth`:** 트리의 최대 깊이 제한.
- **`max_leaf_nodes`:** 리프 노드의 최대 개수 제한.
- **`max_features`:** 각 노드에서 사용할 최대 특성 수.
- **`min_samples_split`:** 노드를 분할하기 위한 최소 샘플 수.
- **`min_samples_leaf`:** 리프 노드에 필요한 최소 샘플 수.

적절한 하이퍼파라미터 설정은 과적합을 방지하고 일반화 성능을 높입니다.

---

## 트리 분석의 최신 활용법: 융합 모델

최근에는 **융합 모델(Composite/Meta Model)**이 널리 사용됩니다. 딥러닝과 머신러닝 모델을 조합하여 복잡한 문제를 해결하는 방식으로 발전하고 있으며, 다양한 문제 해결에 큰 도움이 됩니다.

---
